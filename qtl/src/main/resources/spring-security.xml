<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- 目前不需要将ajax请求拒绝 -->
    <!--<bean id="authEntryPoint" class="com.gooalgene.common.authority.AjaxAwareLoginUrlAuthenticationEntryPoint"
          c:loginFormUrl="/login"/>-->
    <bean id="authenticationSuccessHandler" class="com.gooalgene.common.handler.AuthenticationSuccessHandlerImpl">
        <property name="defaultTargetUrl" value="/search/index" />
    </bean>
    <bean id="ssoAuthenticationEntryPoint" class="com.gooalgene.common.authority.SsoAuthenticationEntryPoint">
        <constructor-arg value="/login"></constructor-arg>
    </bean>
    <sec:http pattern="/**/*.css" security="none"/>
    <sec:http pattern="/**/*.js" security="none"/>
    <sec:http pattern="/**/*.png" security="none"/>
    <sec:http pattern="/**/*.jpg" security="none"/>
    <sec:http auto-config='false' use-expressions="true" entry-point-ref="ssoAuthenticationEntryPoint">
        <sec:session-management invalid-session-url="/login"  session-authentication-strategy-ref="sas">
            <!--第二个人登录,第一个人的认证会失效 -->
            <!--<sec:concurrency-control max-sessions="1"  expired-url="/login"/>-->
            <!--第一个人登录后,第二个人无法用相同账户登录-->
            <!--<sec:concurrency-control max-sessions="1" error-if-maximum-exceeded="true"/>-->
        </sec:session-management>
        <sec:csrf disabled="true"/>
        <sec:intercept-url pattern="/sso/token" access="permitAll()"/>
        <sec:intercept-url pattern="/managerPage" access="hasRole('ROLE_ADMIN')" />
        <sec:intercept-url pattern="/**" access="hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')" />
        <!--<sec:form-login login-page="/login"
                        authentication-success-handler-ref="authenticationSuccessHandler"
                        authentication-failure-handler-ref="authenticationFailureHandler"
                        login-processing-url="/j_spring_security_check"/>-->
        <sec:access-denied-handler error-page="/403"/>
        <sec:logout invalidate-session="true" logout-success-url="/search/index"
                    logout-url="/j_spring_security_logout"/>
        <sec:custom-filter position="CONCURRENT_SESSION_FILTER" ref="concurrencyFilter" />
        <sec:custom-filter ref="filterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR"/>
        <sec:custom-filter ref="rememberMeAuthenticationFilter" position="FORM_LOGIN_FILTER"/>
        <sec:custom-filter ref="ssoAuthenticationFilterByJwt" before="ANONYMOUS_FILTER"/>
    </sec:http>

    <!--session控制相关-->
    <bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
        <constructor-arg ref="sessionRegistry" />
        <constructor-arg ref="sessionInformationExpiredStrategy" />
    </bean>
    <bean id="sessionInformationExpiredStrategy" class="org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy">
        <constructor-arg value="/login"/>
    </bean>
    <bean id="sessionAuthenticationStrategy"
          class="org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy">
        <constructor-arg name="sessionRegistry" ref="sessionRegistry" />
        <property name="maximumSessions" value="1" />
        <property name="exceptionIfMaximumExceeded" value="false"/>
    </bean>
    <bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />

    <bean id="sas" class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy">
        <constructor-arg>
            <list>
                <ref bean="sessionAuthenticationStrategy"/>
                <bean class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy"/>
                <bean class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
                    <constructor-arg ref="sessionRegistry" />
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="ssoAuthenticationFilterByJwt" class="com.gooalgene.common.authority.filter.SsoAuthenticationFilterByJwt">
        <constructor-arg index="0" ref="redisService"></constructor-arg>
        <constructor-arg index="1" ref="webSocket"></constructor-arg>
        <constructor-arg index="2" ref="myUserDetailsService"></constructor-arg>
    </bean>

    <bean id="rememberMeAuthenticationFilter" class="com.gooalgene.common.authority.filter.RememberMeAuthenticationFilter">
        <constructor-arg index="0" ref="redisService"/>
        <constructor-arg index="1" ref="myUserDetailsService"/>
    </bean>
    <bean id="builder" class="com.gooalgene.common.security.JdbcRequestMapBuilder">
        <property name="dataSource" ref="dataSource"/>
        <property name="resourceQuery"
                  value="SELECT rc.res_string, r.name FROM resc rc, role r, role_resc rr WHERE r.id = rr.role_id AND rc.id = rr.resc_id"/>
    </bean>

    <bean id="accessDecisionManager" class="com.gooalgene.common.security.MyAccessDecisionManager"/>

    <sec:authentication-manager alias="authenticationManager">
        <sec:authentication-provider user-service-ref="myUserDetailsService">
            <sec:password-encoder hash="md5"/>
        </sec:authentication-provider>
    </sec:authentication-manager>

    <!--自定义的切入点-->
    <bean id="securityMetadataSource" class="com.gooalgene.common.security.MyFilterInvocationSecurityMetadataSource">
        <property name="builder" ref="builder"/>
    </bean>
    <!-- 执行HTTP请求资源的安全处理 -->
    <bean id="filterSecurityInterceptor"
          class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
        <!-- 用户拥有的权限 -->
        <property name="accessDecisionManager" ref="accessDecisionManager"/>
        <!-- 用户是否拥有所请求资源的权限 -->
        <property name="authenticationManager" ref="authenticationManager"/>
        <!-- 资源与权限对应关系 -->
        <property name="securityMetadataSource" ref="securityMetadataSource">
        </property>
    </bean>
</beans>
